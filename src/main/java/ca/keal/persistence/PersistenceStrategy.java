package ca.keal.persistence;

import java.util.ArrayList;
import java.util.List;

/**
 * A strategy for persisting an object. {@code PersistenceStrategy<T>}s take objects of type {@code T} and transform
 * them into {@link PersistResult}s, representing the XML change necessary.
 * 
 * The relevant {@code PersistenceStrategy} will be called for all persisting of fields of the relevant type
 * marked @{@link Persist}. The class is given. See {@link PersistResult} for documentation of the meaning of its
 * fields.
 * 
 * @param <T> The type of the object that this strategy may persist. This is given as a {@code Class<T>} in the
 * constructor and may be retrieved via {@link #getPersistingClass()}.
 * @see PersistResult
 */
abstract class PersistenceStrategy<T> {
  
  /** The class persisted by this strategy. */
  private final Class<T> cls;
  
  /**
   * Create a new instance of this {@link PersistenceStrategy} with the class object of the class being persisted by
   * this strategy.
   * @param cls The class object of the class this strategy may persist.
   * @throws NullPointerException If {@code cls} is {@code null}.
   */
  public PersistenceStrategy(Class<T> cls) {
    if (cls == null) {
      throw new NullPointerException("Strategy cannot have a null class");
    }
    this.cls = cls;
  }
  
  /**
   * @return The class that can be persisted by this strategy.
   */
  public Class<T> getPersistingClass() {
    return cls;
  }
  
  /**
   * Persist the object of the class returned by {@link #getPersistingClass()} to a {@link PersistResult} given
   * its @{@link Persist} annotation. See {@link PersistResult} for a specification of the return value.
   * @param persistAnno The @{@link Persist} annotation applied to {@code toPersist}.
   * @param toPersist The object to persist. An instance of the class returned by {@link #getPersistingClass()}.
   * @return A {@link PersistResult} describing the XML changes that must be performed to incorporate the persisted
   *  version of {@code toPersist} into the document.
   * @throws NullPointerException If either parameter is {@code null}.
   * @throws PersistenceException If an error is encountered when persisting the object.
   */
  public abstract PersistResult persist(Persist persistAnno, T toPersist);
  
  /**
   * Represents the change in XML that must be performed in order to incorporate a persisted object into a persisting
   * document.
   * 
   * There are two fields in this class:
   * <ul>
   *   <li>
   *     {@code main} is the XML element that directly describes the object. It must be added as a child of the
   *     relevant {@link ParentElement}.
   *   </li>
   *   <li>
   *     {@code newToplevels} is a list containing additional {@link ToplevelElement}s that must be added to the
   *     toplevel list. To this must be added any {@link ToplevelElement}s generated by persisting objects marked
   *     {@code @Persistable(toplevel=true)}.
   *   </li>
   * </ul>
   * 
   * Once it is returned from {@link #persist}, {@code main} <i>cannot</i> be {@code null}. However, it may be
   * temporarily {@code null} beforehand as a matter of convenience.
   */
  public static class PersistResult {
    
    /** The "main" XML element added directly to the relevant {@link ParentElement}. */
    public PersistedElement main;
    
    /** Additional {@link ToplevelElement}s that must be added to the toplevel list. */
    public final List<ToplevelElement> newToplevels = new ArrayList<>();
    
    /** Create a new {@link PersistResult}, leaving {@link #main} as {@code null} for now. */
    public PersistResult() {}
    
    /** Create a new {@link PersistResult} with a value for {@link #main}. */
    public PersistResult(PersistedElement main) {
      this.main = main;
    }
    
  }
  
}
